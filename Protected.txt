Code 1 : Hello 
print("Hello World , c'est YANKHOUBA !!")



Code 2 :
Operations:
# Programme pour effectuer des opérations arithmétiques

print(" TESTS DES 4 OPERATIONS SUIVANTES")


somme = 20 + 2
difference = 50 - 30
produit = 50 * 6
quotient = 10 / 2

print("Somme de 20 et 2 donne :", somme)
print("Difference 50 et 30 donne:", difference)
print("Produit de 50 et 6 donne :", produit)
print("Quotient  de 10 par 2 donne :", quotient)


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 private void sendDirectoryListing(File directory) throws IOException {
        StringBuilder responseBuilder = new StringBuilder();
        responseBuilder.append("HTTP/1.1 200 OK\r\n\r\n");
        responseBuilder.append("<!DOCTYPE html>\r\n");
        responseBuilder.append("<html lang=\"en\">\r\n");
        responseBuilder.append("<head>\r\n");
        responseBuilder.append("<meta charset=\"UTF-8\">\r\n");
        responseBuilder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
        responseBuilder.append("<title>Directory Listing</title>\r\n");
        responseBuilder.append("<style>\r\n");
        responseBuilder.append("body { font-family: Arial, sans-serif; background-color: #f4f4f4; margin: 0; padding: 20px; }\r\n");
        responseBuilder.append("h1 { color: #333; }\r\n");
        responseBuilder.append("ul { list-style-type: none; padding: 0; }\r\n");
        responseBuilder.append("li { margin-bottom: 10px; }\r\n");
        responseBuilder.append(".directory { color: #007bff; font-weight: bold; }\r\n");
        responseBuilder.append(".file { color: #28a745; }\r\n");
        responseBuilder.append("</style>\r\n");
        responseBuilder.append("</head>\r\n");
        responseBuilder.append("<body>\r\n");
        responseBuilder.append("<h1>Directory Listing</h1>\r\n");
        responseBuilder.append("<ul>\r\n");
    
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                responseBuilder.append("<li>");
                if (file.isDirectory()) {
                    responseBuilder.append("<a class=\"directory\" href=\"").append(file.getName()).append("/\">").append(file.getName()).append("</a>");
                } else {
                    responseBuilder.append("<a class=\"file\" href=\"").append(file.getName()).append("\">").append(file.getName()).append("</a>");
                }
                responseBuilder.append("</li>\r\n");
            }
        }
    
        responseBuilder.append("</ul>\r\n");
        responseBuilder.append("</body>\r\n");
        responseBuilder.append("</html>\r\n");
    
        socket.getOutputStream().write(responseBuilder.toString().getBytes());
    }
    

    ------------------------------------------------------------------

      private void sendDirectoryListing(File directory) throws IOException {
        StringBuilder responseBuilder = new StringBuilder();
        responseBuilder.append("HTTP/1.1 200 OK\r\n\r\n");
        responseBuilder.append("<!DOCTYPE html>\r\n");
        responseBuilder.append("<html lang=\"en\">\r\n");
        responseBuilder.append("<head>\r\n");
        responseBuilder.append("<meta charset=\"UTF-8\">\r\n");
        responseBuilder.append("<meta name=\"viewport\" content=\"width=deviDce-width, initial-scale=1.0\">\r\n");
        responseBuilder.append("<title>AFFICHAGE DES REPERTOIRES</title>\r\n");
        responseBuilder.append("<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n");
        responseBuilder.append("<style>\r\n");
        responseBuilder.append("body { background-color: #f8f9fa; }\r\n");
        responseBuilder.append(".container { margin-top: 20px; }\r\n");
        responseBuilder.append(".directory { font-weight: bold; color: #2ECC71; }\r\n"); // Vert menthe pour les répertoires
        responseBuilder.append(".file { color: #3498DB; }\r\n"); // Bleu ciel pour les fichiers
        responseBuilder.append(".directory-item { background-color: #D5F5E3; }\r\n"); // Couleur de fond pour les répertoires (vert pâle)
        responseBuilder.append(".file-item { background-color: #AEE8FA; }\r\n"); // Couleur de fond pour les fichiers (bleu pâle)
        responseBuilder.append(".category-label { color: #6C7A89; }\r\n"); // Nouvelle couleur douce pour les libellés des catégories
        responseBuilder.append("</style>\r\n");
        responseBuilder.append("</head>\r\n");
        responseBuilder.append("<body>\r\n");
        responseBuilder.append("<div class=\"container\">\r\n");
        responseBuilder.append("<h1></h1>\r\n");
    
        // Libellé pour les répertoires
        responseBuilder.append("<h2 class=\"category-label\">REPERTOIRES</h2>\r\n");
        responseBuilder.append("<ul class=\"list-group\">\r\n");
        listSubdirectories(directory, responseBuilder);
        responseBuilder.append("</ul>\r\n");
    
        // Libellé pour les fichiers
        responseBuilder.append("<h2 class=\"category-label\">FICHIERS</h2>\r\n");
        responseBuilder.append("<ul class=\"list-group\">\r\n");
        listFiles(directory, responseBuilder);
        responseBuilder.append("</ul>\r\n");
    
        responseBuilder.append("</div>\r\n");
        responseBuilder.append("</body>\r\n");
        responseBuilder.append("</html>\r\n");
    
        socket.getOutputStream().write(responseBuilder.toString().getBytes());
    }
    
    private void listSubdirectories(File directory, StringBuilder responseBuilder) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    responseBuilder.append("<li class=\"list-group-item directory-item\">");
                    responseBuilder.append("<a class=\"directory\" href=\"").append(file.getName()).append("/\">");
                    responseBuilder.append(file.getName()).append("</a>");
                    responseBuilder.append("</li>\r\n");
                }
            }
        }
    }
    
    private void listFiles(File directory, StringBuilder responseBuilder) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (!file.isDirectory()) {
                    responseBuilder.append("<li class=\"list-group-item file-item\">");
                    responseBuilder.append("<a class=\"file\" href=\"").append(file.getName()).append("\">");
                    responseBuilder.append(file.getName()).append("</a>");
                    responseBuilder.append("</li>\r\n");
                }
            }
        }
    }
    
    
    
    

    private void listFilesAndDirectories(File directory, StringBuilder responseBuilder) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                responseBuilder.append("<li>");
                if (file.isDirectory()) {
                    responseBuilder.append("<b>[DIR]</b> ");
                    responseBuilder.append("<a href=\"").append(file.getName()).append("/\">").append(file.getName()).append("</a>");
                    responseBuilder.append("<ul>");
                    listFilesAndDirectories(file, responseBuilder);
                    responseBuilder.append("</ul>");
                } else {
                    responseBuilder.append("<a href=\"").append(file.getName()).append("\">").append(file.getName()).append("</a>");
                }
                responseBuilder.append("</li>");
            }
        }
    }

    private void sendErrorResponse(int statusCode, String statusMessage) throws IOException {
        String response = "HTTP/1.1 " + statusCode + " " + statusMessage + "\r\n\r\n" +
                          "<html><body><h1>" + statusCode + " " + statusMessage + "</h1></body></html>";
        OutputStream outputStream = socket.getOutputStream();
        outputStream.write(response.getBytes());
        outputStream.flush();
    }

    -------------------------------------------------------------------------------------------------

      
    private void sendDirectoryListing(File directory) throws IOException {
        StringBuilder responseBuilder = new StringBuilder();
        responseBuilder.append("HTTP/1.1 200 OK\r\n\r\n");
        responseBuilder.append("<!DOCTYPE html>\r\n");
        responseBuilder.append("<html lang=\"en\">\r\n");
        responseBuilder.append("<head>\r\n");
        responseBuilder.append("<meta charset=\"UTF-8\">\r\n");
        responseBuilder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
        responseBuilder.append("<title>AFFICHAGE DES REPERTOIRES</title>\r\n");
        responseBuilder.append("<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n");
        responseBuilder.append("<style>\r\n");
        responseBuilder.append("body { background-color: #f8f9fa; }\r\n");
        responseBuilder.append(".container { margin-top: 20px; }\r\n");
        responseBuilder.append(".directory { font-weight: bold; color: #2ECC71; font-size: 1.2em; }\r\n"); // Taille de police plus grande pour les répertoires
        responseBuilder.append(".file { color: #3498DB; }\r\n"); // Bleu ciel pour les fichiers
        responseBuilder.append(".directory-item { background-color: #D5F5E3; border: 2px solid #2ECC71; margin-bottom: 5px; }\r\n"); // Couleur de fond pour les répertoires (vert pâle) avec une bordure verte
        responseBuilder.append(".file-item { background-color: #AEE8FA; border: 2px solid #3498DB; margin-bottom: 5px; }\r\n"); // Couleur de fond pour les fichiers (bleu pâle) avec une bordure bleue
        responseBuilder.append(".category-label { color: #6C7A89; }\r\n"); // Nouvelle couleur douce pour les libellés des catégories
        responseBuilder.append(".sub-folder { margin-left: 20px; }\r\n"); // Ajouter une marge à gauche pour les sous-dossiers
        responseBuilder.append(".directory-item, .file-item { transition: background-color 0.3s ease; }\r\n"); // Ajouter une transition pour le changement de couleur de fond
        responseBuilder.append("</style>\r\n");
        responseBuilder.append("</head>\r\n");
        responseBuilder.append("<body>\r\n");
        responseBuilder.append("<div class=\"container\">\r\n");
        responseBuilder.append("<h1></h1>\r\n");
        
        // Libellé pour les répertoires
        responseBuilder.append("<h2 class=\"category-label\">REPERTOIRES</h2>\r\n");
        responseBuilder.append("<ul class=\"list-group\">\r\n");
        listDirectoriesAndFiles(directory, responseBuilder);
        responseBuilder.append("</ul>\r\n");
        
        responseBuilder.append("</div>\r\n");
        responseBuilder.append("</body>\r\n");
        responseBuilder.append("</html>\r\n");
        
        socket.getOutputStream().write(responseBuilder.toString().getBytes());
    }
    
    private void listDirectoriesAndFiles(File directory, StringBuilder responseBuilder) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    responseBuilder.append("<li class=\"list-group-item directory-item\">");
                    responseBuilder.append("<a class=\"directory\" href=\"").append(file.getName()).append("/\">");
                    responseBuilder.append(file.getName()).append("</a>");
                    responseBuilder.append("</li>\r\n");
    
                    // Afficher les fichiers dans le répertoire avec les flèches
                    listFilesInDirectory(file, responseBuilder);
                }
            }
    
            // Libellé pour les fichiers
            responseBuilder.append("<h2 class=\"category-label\">FICHIERS</h2>\r\n");
            responseBuilder.append("<ul class=\"list-group\">\r\n");
            for (File file : files) {
                if (!file.isDirectory()) {
                    responseBuilder.append("<li class=\"list-group-item file-item\">");
                    responseBuilder.append("<a class=\"file\" href=\"").append(file.getName()).append("\">");
                    responseBuilder.append(file.getName()).append("</a>");
                    responseBuilder.append("</li>\r\n");
                }
            }
            responseBuilder.append("</ul>\r\n");
        }
    }
    
    private void listFilesInDirectory(File directory, StringBuilder responseBuilder) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (!file.isDirectory()) {
                    responseBuilder.append("<li class=\"list-group-item file-item\">");
                    responseBuilder.append("<span class=\"sub-file-arrow\">&#9658;</span>");
                    responseBuilder.append("<a class=\"file\" href=\"").append(directory.getName()).append("/").append(file.getName()).append("\">");
                    responseBuilder.append(file.getName()).append("</a>");
                    responseBuilder.append("</li>\r\n");
                }
            }
        }
    }
    